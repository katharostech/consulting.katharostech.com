---
import ContentSection from "~/components/content-section.astro";

interface Props {
  id: string;
  title: string;
  lead: string;
  turnstileSiteKey: string;
  contactBackend: string;
}
const props = Astro.props;
---

<ContentSection title={props.title} id={props.id}>
  <Fragment slot="lead" set:html={props.lead} />

  <form
    class="flex w-[30em] max-w-full flex-col gap-6 rounded-lg border border-gray-200 bg-white p-10 dark:border-gray-700 dark:bg-slate-900"
  >
    <label class="flex flex-col gap-2">
      Name
      <input
        name="name"
        placeholder="Your Name"
        class="text-md block w-full rounded-lg border border-gray-200 bg-white px-4 py-3 dark:border-gray-700 dark:bg-slate-900"
      />
    </label>
    <label class="flex flex-col gap-2">
      <span>Email <span class="text-red-500">*</span></span>
      <input
        name="email"
        type="email"
        required="true"
        placeholder="name@example.com"
        class="text-md block w-full rounded-lg border border-gray-200 bg-white px-4 py-3 dark:border-gray-700 dark:bg-slate-900"
      />
    </label>
    <label class="flex flex-col gap-2">
      <span>Message <span class="text-red-500">*</span></span>
      <textarea
        name="message"
        required="true"
        placeholder="You message..."
        class="text-md block w-full rounded-lg border border-gray-200 bg-white px-4 py-3 dark:border-gray-700 dark:bg-slate-900"
      ></textarea>
    </label>

    <div class="checkbox mx-auto">
      <div
        class="cf-turnstile"
        data-sitekey={import.meta.env.MODE == "production"
          ? props.turnstileSiteKey
          : "3x00000000000000000000FF"}
        data-theme="dark"
      >
      </div>
    </div>

    <button class="rounded-2xl border border-gray-900 bg-green-500 text-black"
      >Send</button
    >
  </form>
</ContentSection>

<script
  is:inline
  src="https://challenges.cloudflare.com/turnstile/v0/api.js"
  defer></script>

<script define:vars={{ props }} is:inline>
  // Add event listener for form submission
  document.querySelector("form")?.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);

    // Call the contact webhook
    try {
      const response = await fetch(props.contactBackend, {
        method: "POST",
        body: formData,
      });

      if (!response.ok) {
        throw new Error("Network response was not ok");
      }

      window
        .Toastify({
          text: "Message sent successfully",
          style: { background: "green" },
        })
        .showToast();

      // Clear the form fields
      document
        .querySelectorAll("input,textarea")
        .forEach((x) => (x.value = ""));
    } catch (error) {
      console.error("Error sending message:", error);
      window
        .Toastify({
          text: "Error sending message",
          style: { background: "red" },
        })
        .showToast();
    }
  });
</script>
